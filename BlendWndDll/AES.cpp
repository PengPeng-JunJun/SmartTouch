#include "stdafx.h"
#include "AES.h"

const BYTE s_box[] =
{
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16	// f
};


const BYTE inv_s_box[] =
{
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, // 0
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, // 1
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, // 2
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, // 3
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, // 4
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, // 5
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, // 6
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, // 7
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, // 8
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, // 9
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, // a
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, // b
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, // c
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, // d
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, // e
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d  // f
};


CAES::CAES(BYTE * pKey)
{
	BYTE szKey[128] = "01234567890123456789012345678901";

	if (nullptr == pKey)
	{
		_Key_Expansion(szKey, m_w);
	}
	else
	{
		_Key_Expansion(pKey, m_w);
	}
}


CAES::~CAES(void)
{
}


CString CAES::Cipher(const CString & strData)
{
	int nLength = strData.GetLength();

	CString strLen;
	strLen.Format(_T("%.4d"), nLength);

	CString strTmp = strLen + strData;

	nLength = strTmp.GetLength();
	const int nSize = ((nLength >> 4) + 1) << 4;

	BYTE *pSrc = new BYTE[nSize];
	memset(pSrc, 0, nSize);

	for (int i = 0; i < nLength; i++)
	{
		pSrc[i] = (BYTE)strTmp[i];
	}

	CString strRes;

	for (int i = 0; i < (nSize >> 4); i++)
	{
		BYTE state[4][4];

		for (int r = 0; r < 4; r++)
		{
			for (int c = 0; c < 4; c++)
			{
				state[r][c] = pSrc[(r << 2) + c];
			}
		}

		_Add_Round_Key(state, m_w[0]);

		for (int i = 1; i <= 10; i++)
		{
			_Sub_Bytes(state);
			_Shift_Rows(state);

			if (i < 10)
			{
				_Mix_Columns(state);
			}

			_Add_Round_Key(state, m_w[i]);
		}

		for (int r = 0; r < 4; r++)
		{
			for (int c = 0; c < 4; c++)
			{
				CString strTmp;
				strTmp.Format(_T("%02X"), state[r][c]);
				strRes.Append(strTmp);
			}
		}
	}

	delete []pSrc;
	pSrc = nullptr;

	return strRes;
}


CString CAES::Inv_Cipher(const CString & strHex)
{
	CString strRes;

	const int nLength = strHex.GetLength();

	for (int i = 0; i < (nLength >> 5); i++)
	{
		BYTE state[4][4];

		int nPos = 0;

		for (int r = 0; r < 4; r++)
		{
			for (int c = 0; c < 4; c++)
			{
				BYTE B1 = 0;
				BYTE B2 = 0;

				if (strHex[nPos] >= 'A')
				{
					B1 = (BYTE)strHex[nPos] - 'A' + 10;
				}
				else
				{
					B1 = (BYTE)strHex[nPos] - '0';
				}

				if (strHex[nPos + 1] >= 'A')
				{
					B2 = (BYTE)strHex[nPos + 1] - 'A' + 10;
				}
				else
				{
					B2 = (BYTE)strHex[nPos + 1] - '0';
				}

				state[r][c] = (B1 << 4) + B2;

				nPos += 2;
			}
		}

		_Add_Round_Key(state, m_w[10]);

		for (int i = 9; i >= 0; i--)
		{
			_Inv_Shift_Rows(state);
			_Inv_Sub_Bytes(state);
			_Add_Round_Key(state, m_w[i]);

			if (i)
			{
				_Inv_Mix_Columns(state);
			}
		}

		for (int r = 0; r < 4; r++)
		{
			for (int c = 0; c < 4; c++)
			{
				CString strTmp;
				strTmp.Format(_T("%c"), state[r][c]);
				strRes.Append(strTmp);
			}
		}
	}

	strRes.Delete(0, 4);

	return strRes;
}

// 
// CString CAES::Cipher(void * pData, int length)
// {
// 	BYTE * in = (BYTE*)pData;
// 
// 	if (!length)
// 	{
// 		while(*(in + length++));
// 		
// 		in = (BYTE *)pData;
// 	}
// 
// 	for (int i = 0; i < length; i += 16)
// 	{
// 		Cipher(in + i);
// 	}
// 
// 	CString strRes;
// 
// 	for (int i = 0; i < 32; i++)
// 	{
// 		CString strTmp;
// 		strTmp.Format(_T("%2X"), in[i]);
// 	}
// 
// 	return strRes;
// }


// CString CAES::Inv_Cipher(void * pData, int length)
// {
// 	BYTE *in = (BYTE *)pData;
// 
// 	for (int i = 0; i < length; i += 16)
// 	{
// 		Inv_Cipher(in + i);
// 	}
// 
// 	CString strRes;
// 
// 	for (int i = 0; i < 32; i++)
// 	{
// 		CString strTmp;
// 		strTmp.Format(_T("%2X"), in[i]);
// 	}
// 
// 	return strRes;
// }


// int CAES::Str2Hex(TCHAR H, TCHAR L)
// {
// 	if (H >= '0' && H <= '9')
// 	{
// 		H -= '0'; 
// 	}
// 	else if (H >= 'A' && H <= 'F')
// 	{
// 		H = H - 'A' + 10;
// 	}
// 	else if (H >= 'a' && H <= 'f')
// 	{
// 		H = H - 'a' + 10;
// 	}
// 
// 	if (L >= '0' && L <= '9')
// 	{
// 		L -= '0'; 
// 	}
// 	else if (L >= 'A' && L <= 'F')
// 	{
// 		L = L - 'A' + 10;
// 	}
// 	else if (L >= 'a' && L <= 'f')
// 	{
// 		L = L - 'a' + 10;
// 	}
// 
// 	const int res = (H << 4) + L;
// 
// 	return res;
// }


void CAES::_Key_Expansion(BYTE *key, BYTE w[][4][4])
{
	const BYTE rc[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			w[0][r][c] = key[r + (c << 2)];
		}
	}

	for (int i = 1; i <= 10; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			BYTE t[4] = {0};

			for (int r = 0; r < 4; r++)
			{
				t[r] = j? w[i][r][j-1]: w[i-1][r][3];
			}

			if (!j)
			{
				BYTE tmp = t[0];

				for (int r = 0; r < 3; r++)
				{
					t[r] = s_box[t[(r + 1) % 4]];
				}

				t[3] = s_box[tmp];
				t[0] ^= rc[i - 1];
			}

			for (int r = 0; r < 4; r++)
			{
				w[i][r][j] = w[i - 1][r][j] ^ t[r];
			}
		}
	}
}


BYTE CAES::_FFmul(BYTE a, BYTE b)
{
	BYTE res = 0;
	BYTE bw[4] = {b, 0, 0, 0};

	for (int i = 1; i < 4; i++)
	{
		bw[i] = bw[i - 1] << 1;

		if (bw[i - 1] & 0x80)
		{
			bw[i] ^= 0x1b;
		}
	}

	for (int i = 0; i < 4; i++)
	{
		if ((a >> i) & 0x01)
		{
			res ^= bw[i];
		}
	}

	return res;
}

// 对每个字节进行S-盒变换
void CAES::_Sub_Bytes(BYTE state[][4])
{
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			state[r][c] = s_box[state[r][c]];
		}
	}
}


void CAES::_Inv_Sub_Bytes(BYTE state[][4])
{
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			state[r][c] = inv_s_box[state[r][c]];
		}
	}
}

// 即行移位变换作用于行上，第0行不变，第1行循环左移1个字节，第2行循环左移2个字节，第3行循环左移3个字节
void CAES::_Shift_Rows(BYTE state[][4])
{
	BYTE t[4] = {0};

	for (int r = 1; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			t[c] = state[r][(r + c) % 4];
		}

		for (int c = 0; c < 4; c++)
		{
			state[r][c] = t[c];
		}
	}
}


void CAES::_Inv_Shift_Rows(BYTE state[][4])
{
	BYTE t[4] = {0};

	for (int r = 1; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			t[c] = state[r][(c - r + 4) % 4];
		}

		for (int c = 0; c < 4; c++)
		{
			state[r][c] = t[c];
		}
	}
}


void CAES::_Mix_Columns(BYTE state[][4])
{
	BYTE t[4] = {0};

	for (int c = 0; c < 4; c++)
	{
		for (int r = 0;  r< 4; r++)
		{
			t[r] = state[r][c];
		}

		for (int r = 0; r < 4; r++)
		{
			state[r][c] = _FFmul(0x02, t[r])
				^ _FFmul(0x03, t[(r + 1) % 4])
				^ _FFmul(0x01, t[(r + 2) % 4])
				^ _FFmul(0x01, t[(r + 3) % 4]);
		}
	}
}


void CAES::_Inv_Mix_Columns(BYTE state[][4])
{
	BYTE t[4] = {0};

	for (int c = 0; c < 4; c++)
	{
		for (int r = 0; r < 4; r++)
		{
			t[r] = state[r][c];
		}

		for (int r = 0; r < 4; r++)
		{
			state[r][c] = _FFmul(0x0e, t[r])
				^ _FFmul(0x0b, t[(r + 1) % 4])
				^ _FFmul(0x0d, t[(r + 2) % 4])
				^ _FFmul(0x09, t[(r + 3) % 4]);
		}
	}
}


void CAES::_Add_Round_Key(BYTE state[][4], BYTE k[][4])
{	
	for (int c = 0; c < 4; c++)
	{
		for (int r = 0; r < 4; r++)
		{
			state[r][c] ^= k[r][c];
		}
	}
}